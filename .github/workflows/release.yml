name: Release

on:
  push:
    tags:
    - '*'

defaults:
  run:
    shell: bash

permissions:
  contents: write

jobs:
  prerelease:
    runs-on: ubuntu-latest

    outputs:
      value: ${{ steps.prerelease.outputs.value }}

    steps:
    - name: Prerelease Check
      id: prerelease
      run: |
        if [[ ${{ github.ref_name }} =~ ^[0-9]+[.][0-9]+[.][0-9]+$ ]]; then
            echo value=false >> $GITHUB_OUTPUT
        else
            echo value=true >> $GITHUB_OUTPUT
        fi

  package:
    strategy:
      matrix:
        target:
        - aarch64-apple-darwin
        - aarch64-unknown-linux-musl
        - aarch64-unknown-linux-gnu
        # These older ARM targets are disabled because cranelift (used by wasmtime)
        # only supports aarch64 ARM. It's potentially possible to use an alternative to cranelift.
        # https://github.com/bytecodealliance/wasmtime/issues/1173
        # - arm-unknown-linux-musleabihf
        # - armv7-unknown-linux-musleabihf
        # x86 Apple build is disabled because we get link issues around sixel.
        # I've not looked into this much.
        #- x86_64-apple-darwin
        - x86_64-unknown-linux-musl
        - x86_64-unknown-linux-gnu
        include:
        - target: aarch64-apple-darwin
          os: macos-latest
          target_rustflags: ''
        - target: aarch64-unknown-linux-musl
          os: ubuntu-latest
          target_rustflags: '--codegen linker=aarch64-linux-musl-gcc'
        - target: aarch64-unknown-linux-gnu
          os: ubuntu-latest
          target_rustflags: ''
        # - target: arm-unknown-linux-musleabihf
        #   os: ubuntu-latest
        #   target_rustflags: '--codegen linker=arm-linux-gnueabihf-gcc'
        # - target: armv7-unknown-linux-musleabihf
        #   os: ubuntu-latest
        #   target_rustflags: '--codegen linker=arm-linux-gnueabihf-gcc'
        # - target: x86_64-apple-darwin
        #   os: macos-latest
        #   target_rustflags: ''
        - target: x86_64-unknown-linux-musl
          os: ubuntu-latest
          target_rustflags: ''
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-latest
          target_rustflags: ''

    runs-on: ${{matrix.os}}

    needs:
    - prerelease

    steps:
    - uses: actions/checkout@v4

    - name: Install AArch64 Toolchain
      if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
      run: |
        sudo apt-get update
        sudo apt-get install gcc-aarch64-linux-gnu libc6-dev

    - name: Install Linux Dependencies
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt-get update
        sudo apt-get install libsixel-bin fontconfig

    # macOS bits needed by libsixelâ€™s ./configure script + a working dylib
    - name: Install deps for sixel
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        brew update
        brew install autoconf automake libtool pkg-config libsixel
        # make Cargo see the Homebrew dylib
        echo "RUSTFLAGS=-L$(brew --prefix libsixel)/lib" >> $GITHUB_ENV
        echo "DYLD_FALLBACK_LIBRARY_PATH=$(brew --prefix libsixel)/lib" >> $GITHUB_ENV

    - name: Install cross
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: cargo install cross

    - name: Package
      id: package
      env:
        TARGET: ${{ matrix.target }}
        REF: ${{ github.ref }}
        OS: ${{ matrix.os }}
        TARGET_RUSTFLAGS: ${{ matrix.target_rustflags }}
        RUSTFLAGS: ${{ env.RUSTFLAGS }}
        DYLD_FALLBACK_LIBRARY_PATH: ${{ env.DYLD_FALLBACK_LIBRARY_PATH }}
      run: ./ci/package.sh
      shell: bash

    - name: Publish Archive
      uses: softprops/action-gh-release@v2.2.1
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      with:
        draft: false
        files: ${{ steps.package.outputs.archive }}
        prerelease: ${{ needs.prerelease.outputs.value }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish Changelog and Scripts
      uses: softprops/action-gh-release@v2.2.1
      if: >-
        ${{
          startsWith(github.ref, 'refs/tags/')
          && matrix.target == 'aarch64-unknown-linux-musl'
        }}
      with:
        draft: false
        files: |
          CHANGELOG.md
        prerelease: ${{ needs.prerelease.outputs.value }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  checksum:
    runs-on: ubuntu-latest

    needs:
    - package
    - prerelease

    steps:
    - name: Download Release Archives
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: >-
        gh release download
        --repo slipwayhq/slipway
        --pattern '*'
        --dir release
        ${{ github.ref_name }}

    - name: Create Checksums
      run: |
        cd release
        shasum -a 256 * > ../SHA256SUMS

    - name: Publish Checksums
      uses: softprops/action-gh-release@v2.2.1
      with:
        draft: false
        files: SHA256SUMS
        prerelease: ${{ needs.prerelease.outputs.value }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    runs-on: ubuntu-latest

    needs:
    - package
    - prerelease

    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: slipwayhq/slipway
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: index.docker.io/slipwayhq/slipway
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true